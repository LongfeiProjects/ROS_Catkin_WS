"""autogenerated by genpy from youbot_modbus_server/YoubotModbusButtonMsgRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class YoubotModbusButtonMsgRequest(genpy.Message):
  _md5sum = "d7be0bb39af8fb9129d5a76e6b63a290"
  _type = "youbot_modbus_server/YoubotModbusButtonMsgRequest"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
















Header header

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header']
  _slot_types = ['std_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(YoubotModbusButtonMsgRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
    else:
      self.header = std_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
"""autogenerated by genpy from youbot_modbus_server/YoubotModbusButtonMsgResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class YoubotModbusButtonMsgResponse(genpy.Message):
  _md5sum = "058e4e1f41e0033a817be53009922805"
  _type = "youbot_modbus_server/YoubotModbusButtonMsgResponse"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
bool data_validity
int8 estop_button_status
int8 estop_indicator_status
int8 yellow_button_status
int8 yellow_indicator_status
int8 green_button_status
int8 green_indicator_status
int8 runstop_switch_status
int8 runstop_indicator_status
int8 supervisor_runstop_status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','data_validity','estop_button_status','estop_indicator_status','yellow_button_status','yellow_indicator_status','green_button_status','green_indicator_status','runstop_switch_status','runstop_indicator_status','supervisor_runstop_status']
  _slot_types = ['std_msgs/Header','bool','int8','int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,data_validity,estop_button_status,estop_indicator_status,yellow_button_status,yellow_indicator_status,green_button_status,green_indicator_status,runstop_switch_status,runstop_indicator_status,supervisor_runstop_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(YoubotModbusButtonMsgResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.data_validity is None:
        self.data_validity = False
      if self.estop_button_status is None:
        self.estop_button_status = 0
      if self.estop_indicator_status is None:
        self.estop_indicator_status = 0
      if self.yellow_button_status is None:
        self.yellow_button_status = 0
      if self.yellow_indicator_status is None:
        self.yellow_indicator_status = 0
      if self.green_button_status is None:
        self.green_button_status = 0
      if self.green_indicator_status is None:
        self.green_indicator_status = 0
      if self.runstop_switch_status is None:
        self.runstop_switch_status = 0
      if self.runstop_indicator_status is None:
        self.runstop_indicator_status = 0
      if self.supervisor_runstop_status is None:
        self.supervisor_runstop_status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.data_validity = False
      self.estop_button_status = 0
      self.estop_indicator_status = 0
      self.yellow_button_status = 0
      self.yellow_indicator_status = 0
      self.green_button_status = 0
      self.green_indicator_status = 0
      self.runstop_switch_status = 0
      self.runstop_indicator_status = 0
      self.supervisor_runstop_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B9b.pack(_x.data_validity, _x.estop_button_status, _x.estop_indicator_status, _x.yellow_button_status, _x.yellow_indicator_status, _x.green_button_status, _x.green_indicator_status, _x.runstop_switch_status, _x.runstop_indicator_status, _x.supervisor_runstop_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.data_validity, _x.estop_button_status, _x.estop_indicator_status, _x.yellow_button_status, _x.yellow_indicator_status, _x.green_button_status, _x.green_indicator_status, _x.runstop_switch_status, _x.runstop_indicator_status, _x.supervisor_runstop_status,) = _struct_B9b.unpack(str[start:end])
      self.data_validity = bool(self.data_validity)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B9b.pack(_x.data_validity, _x.estop_button_status, _x.estop_indicator_status, _x.yellow_button_status, _x.yellow_indicator_status, _x.green_button_status, _x.green_indicator_status, _x.runstop_switch_status, _x.runstop_indicator_status, _x.supervisor_runstop_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.data_validity, _x.estop_button_status, _x.estop_indicator_status, _x.yellow_button_status, _x.yellow_indicator_status, _x.green_button_status, _x.green_indicator_status, _x.runstop_switch_status, _x.runstop_indicator_status, _x.supervisor_runstop_status,) = _struct_B9b.unpack(str[start:end])
      self.data_validity = bool(self.data_validity)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_B9b = struct.Struct("<B9b")
class YoubotModbusButtonMsg(object):
  _type          = 'youbot_modbus_server/YoubotModbusButtonMsg'
  _md5sum = '60c5351e0a2f691783ac8ca79b3eed06'
  _request_class  = YoubotModbusButtonMsgRequest
  _response_class = YoubotModbusButtonMsgResponse
